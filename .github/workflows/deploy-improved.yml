name: Deploy Portfolio to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: 🧹 Clear npm cache
        run: npm cache clean --force

      - name: 📚 Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          npm ci --prefer-offline --no-audit --fund false
          echo "✅ Dependencies installed successfully"

      - name: 🔍 Verify installation
        run: |
          echo "🔍 Verifying build tools..."
          echo "Node.js: $(node --version)"
          echo "npm: $(npm --version)"
          echo "Vite: $(npx vite --version)"
          echo "✅ All tools verified"

      - name: 🧪 Run tests (if available)
        run: |
          if npm run test:ci >/dev/null 2>&1; then
            echo "🧪 Running tests..."
            npm run test:ci
          else
            echo "⚠️ No test:ci script found, skipping tests"
          fi
        continue-on-error: true

      - name: 🔍 Lint code
        run: |
          echo "🔍 Running linter..."
          if command -v npx eslint >/dev/null 2>&1; then
            npx eslint . --ext js,jsx,ts,tsx --report-unused-disable-directives --max-warnings 50 || echo "⚠️ Linting issues found"
          else
            echo "⚠️ ESLint not available, skipping linting"
          fi
        continue-on-error: true

      - name: 🏗️ Build project
        env:
          NODE_ENV: production
          VITE_BASE_URL: /web-port/
          CI: true
        run: |
          echo "🏗️ Building project for production..."
          npx vite build --mode production
          echo "✅ Build completed successfully"

      - name: 🔍 Verify build output
        run: |
          echo "🔍 Verifying build output..."

          # Check for build directories
          BUILD_DIR=""
          if [ -d "dist" ]; then
            BUILD_DIR="dist"
          elif [ -d "build" ]; then
            BUILD_DIR="build"
          else
            echo "❌ No build directory found!"
            echo "Available directories:"
            ls -la
            exit 1
          fi

          echo "📁 Found build directory: $BUILD_DIR"

          # Standardize to 'build' directory for GitHub Pages
          if [ "$BUILD_DIR" = "dist" ]; then
            echo "📁 Moving dist to build for GitHub Pages compatibility"
            mv dist build
          fi

          # Verify critical files
          if [ ! -f "build/index.html" ]; then
            echo "❌ index.html not found!"
            exit 1
          fi

          if [ ! -d "build/assets" ]; then
            echo "⚠️ Assets directory not found, checking for bundled files..."
          fi

          echo "📊 Build size: $(du -sh build)"
          echo "📁 Build contents:"
          ls -la build/

          # Check for organization assets specifically
          if [ -d "build/assets" ]; then
            echo "🏢 Checking organization assets..."
            find build/assets -name "*organization*" -o -name "*eim*" -o -name "*search*" -o -name "*gdsc*" -o -name "*uft*" || echo "⚠️ Some organization assets might be missing"
          fi

          echo "✅ Build verification completed"

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: ./build
          retention-days: 7
          if-no-files-found: error

  # Job 2: Deploy to GitHub Pages
  deploy:
    name: Deploy to GitHub Pages
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: ./build

      - name: 🔍 Verify artifacts
        run: |
          echo "🔍 Verifying downloaded artifacts..."

          if [ ! -d "build" ]; then
            echo "❌ Build directory not found!"
            exit 1
          fi

          if [ ! -f "build/index.html" ]; then
            echo "❌ index.html not found!"
            exit 1
          fi

          echo "📊 Build size: $(du -sh build)"
          echo "📁 Build structure:"
          find build -type f -name "*.html" -o -name "*.js" -o -name "*.css" | head -20

          # Verify organization assets
          echo "🏢 Checking for organization assets..."
          find build -name "*organization*" -o -name "*eim*" -o -name "*search*" | head -10 || echo "⚠️ Organization assets check completed"

          echo "✅ Artifacts verified successfully"

      - name: ⚙️ Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: 📤 Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🎉 Deployment complete
        run: |
          echo "🎉 Portfolio deployed successfully!"
          echo "🔗 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📱 Your portfolio is now live and accessible!"
          echo ""
          echo "🔧 If you encounter any issues:"
          echo "   1. Check the repository settings -> Pages"
          echo "   2. Ensure the source is set to 'GitHub Actions'"
          echo "   3. Wait a few minutes for DNS propagation"
          echo ""
          echo "✨ Happy coding!"

  # Job 3: Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy]
    if: failure()

    steps:
      - name: 📢 Failure notification
        run: |
          echo "❌ Deployment failed!"
          echo "🔍 Please check the logs above for details"
          echo "💡 Common issues and solutions:"
          echo "   • Build errors: Check your code for syntax errors"
          echo "   • Missing dependencies: Ensure package.json is correct"
          echo "   • Asset loading: Verify file paths and imports"
          echo "   • Environment variables: Check if any are missing"
