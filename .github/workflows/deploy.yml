name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Prevent concurrent deployments
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          npm ci --frozen-lockfile
          echo "Verifying installation..."
          npm list --depth=0 | grep -E "(vite|eslint)" || echo "Some packages may not be listed"
          echo "Installing missing dev dependencies if needed..."
          npm install --save-dev vite@^4.4.5 eslint || echo "Dependencies already installed"

      - name: Verify installed packages
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Working directory: $(pwd)"
          echo "Package.json scripts:"
          cat package.json | grep -A 10 '"scripts"'
          echo "Checking node_modules structure..."
          ls -la node_modules/.bin/ | grep -E "(vite|eslint)" || echo "Binary files not found in .bin"

      - name: Run linting
        run: |
          echo "Running linting with npm script..."
          npm run lint || echo "Linting failed, but continuing..."
        continue-on-error: true

      - name: Build project
        run: |
          echo "Starting build process..."
          echo "Using npm run build script..."
          npm run build
          echo "Build completed successfully"

      - name: Verify build output
        run: |
          if [ ! -d "build" ]; then
            echo "Build directory not found!"
            exit 1
          fi
          echo "Build size: $(du -sh build)"
          ls -la build/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-files
          path: ./build
          retention-days: 7

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-files
          path: ./build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Notify deployment success
        run: |
          echo "ðŸš€ Deployment successful!"
          echo "ðŸ“„ Site URL: ${{ steps.deployment.outputs.page_url }}"
